<project name="acm" default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">
  <property name="root.dir" value="${basedir}" />

  <import file="${basedir}/ant/bootstrap.xml" />

  <taskdef resource="net/sf/antcontrib/antlib.xml"
           classpath="${basedir}/ant/ant-contrib-1.0b3.jar"/>

  <target name="dist" depends="clean, jar" description="build, test, and package the project">
	<mkdir dir="${package.dir}"/>
	<mkdir dir="${package.dir}/lib"/>
	<mkdir dir="${package.dir}/resources"/>
	
	<copy todir="${package.dir}/lib">
	    <fileset dir="${basedir}/lib"/>
	</copy>
	<copy todir="${package.dir}">
	    <fileset dir="${basedir}/scripts"/>
	</copy>
	<copy todir="${package.dir}/resources">
	    <fileset dir="${resources.dir}"/>
	</copy>
	<chmod dir="${package.dir}" perm="ugo+rx" 
	       includes="**/*.sh"/>
	
	<copy todir="${package.dir}" file="${jar.file}"/>	
  </target>

  <target name="zip" depends="dist" description="zips the project">
	<zip destfile="${basedir}/${ant.project.name}.zip"
	     basedir="${package.dir}"/>
  </target>	

  <path id="lib.path.id">
    <fileset dir="${lib.dir}"/>
  </path>
  <path id="run.path.id">
    <path refid="lib.path.id"/>
    <path location="${classes.dir}"/>
  </path>

  <!-- setup ivy default configuration with some custom info -->
  <property name="ivy.local.default.root" value="${repository.dir}/local"/>
  <property name="ivy.shared.default.root" value="${repository.dir}/shared"/>

  <!-- all modules use the same version of thrift -->
  <property name="thrift.version" value="0.5.0"/>

  <!-- =================================
       target: resolve
       ================================= -->
  <target name="resolve" depends="install-ivy"
          description="--> resolve and retrieve dependencies with ivy">
    <mkdir dir="${lib.dir}"/>
    <!-- not usually necessary, ivy creates the directory IF there are dependencies -->

    <!-- the call to resolve is not mandatory, retrieve makes an implicit call if we don't -->
    <ivy:resolve file="${ivy.file}" log="quiet"/>
    <ivy:retrieve type="jar,bundle" pattern="${lib.dir}/[organisation]-[artifact].[ext]" sync="true"/>
  </target>

  <target name="ivy-report" depends="resolve">
     <ivy:report todir="reports/ivy"/>
   </target>


  <!-- =================================
       target: report
       ================================= -->
  <target name="report" depends="resolve" description="--> generates a report of dependencies">
    <ivy:report todir="${build.dir}"/>
  </target>

  <!-- =================================
       target: compile
       ================================= -->
  <target name="compile" depends="clean-build, resolve, generate-thrift" description="--> compile the project">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${java.src.dir}" destdir="${classes.dir}" classpathref="lib.path.id" debug="true" encoding="UTF-8"
	       includeantruntime="false"/>
  </target>

  <!-- =================================
       target: ivy-new-version
       ================================= -->
  <target name="ivy-new-version-global" depends="install-ivy" unless="ivy.new.revision">
    <!-- asks ivy an available version number -->
    <echo message="Determining new version globally ..."/>
    <ivy:info file="${ivy.file}"/>
    <ivy:buildnumber
        organisation="${ivy.organisation}" module="${ivy.module}"
        revision="${ivy.revision}" defaultBuildNumber="1" resolver="svn.twitter.biz"/>
    <echo message="ivy.new.revision = ${ivy.new.revision}"/>
  </target>

  <target name="ivy-new-version" depends="install-ivy" unless="ivy.new.revision">
    <!-- asks ivy an available version number -->
    <echo message="Determining new version locally ..."/>
    <ivy:info file="${ivy.file}"/>
    <ivy:buildnumber
        organisation="${ivy.organisation}" module="${ivy.module}"
        revision="${ivy.revision}" defaultBuildNumber="1" resolver="shared"/>
    <echo message="ivy.new.revision = ${ivy.new.revision}"/>
  </target>

  <target name="local-version">
    <tstamp>
      <format property="now" pattern="yyyyMMddHHmmss"/>
    </tstamp>
    <property name="ivy.new.revision" value="${module.version.target}-local-${now}"/>
  </target>

  <!-- =================================
       target: jar
       ================================= -->
  <target name="jar" depends="ivy-new-version, compile, compile-tests" description="--> make a jar file for this project">
    <jar destfile="${jar.file}">
      <fileset dir="${classes.dir}"/>
      <fileset dir="${resources.dir}"/>
      <fileset dir="." includes="**/*.yml"/>
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Build-Version" value="${ivy.new.revision}"/>
      </manifest>
    </jar>
  </target>

  <!-- =================================
       target: various cleans
       ================================= -->
  <target name="clean-build" description="--> remove the build dir">
    <delete includeemptydirs="true" dir="${build.dir}"/>
    <delete file="build.properties"/>
  </target>

  <target name="clean-gen" description="--> clean the generated thrift files">
    <delete includeemptydirs="true" dir="${src.dir}/main/gen-thrift"/>
    <delete includeemptydirs="true" dir="${src.dir}/main/gen-rb"/>
  </target>

  <target name="clean-dist" description="--> clean packaged zip files">
    <delete>
      <fileset dir="${basedir}" includes="*.zip"/>
    </delete>
    <delete includeemptydirs="true" dir="${package.dir}"/>
  </target>

  <target name="clean-repo-cache" description="--> remove the repo cache dir">
    <delete includeemptydirs="true" dir="${ivy.repo.cache.dir}"/>
  </target>

  <target name="clean" depends="clean-build, clean-gen, clean-dist, clean-repo-cache"/>

  <!-- =================================
       target: test
       ================================= -->

  <property name="test.build.dir" value="${build.dir}/test"/>
  <property name="test.build.data" value="${test.build.dir}/data"/>
  <property name="test.classes.dir" value="${test.build.dir}/classes"/>

  <property name="test.log.dir" value="${test.build.dir}/logs"/>
  <property name="test.source.dir" value="${src.dir}/test"/>

  <property name="test.includes" value="**/Test*.java,**/*Test.java"/>
  <property name="test.output" value="no"/>
  <property name="test.timeout" value="900000"/>

  <property name="test.junit.output.format" value="plain"/>
  <property name="test.junit.printsummary" value="yes"/>
  <property name="test.junit.fork.mode" value="perTest"/>
  <property name="test.junit.haltonfailure" value="no"/>
  <property name="test.junit.maxmemory" value="512m"/>

  <target name="test" depends="jar, test-only" unless="skip.test" description="--> build and run unit tests" />

  <target name="test-only" unless="skip.test" description="--> run unit tests">
    <delete dir="${test.log.dir}"/>
    <mkdir dir="${test.log.dir}"/>
    <junit showoutput="${test.output}"
           printsummary="${test.junit.printsummary}"
           haltonfailure="${test.junit.haltonfailure}"
           fork="yes"
           forkmode="${test.junit.fork.mode}"
           maxmemory="${test.junit.maxmemory}"
           dir="${basedir}" timeout="${test.timeout}"
           errorProperty="tests.failed" failureProperty="tests.failed">
      <sysproperty key="test.build.data" value="${test.build.data}"/>
      <sysproperty key="test.log.dir"    value="${test.log.dir}"/>
      <sysproperty key="test.source.dir" value="${test.source.dir}"/>
      <sysproperty key="java.library.path" value="${build.native}"/>
      <assertions>
        <enable/>
      </assertions>
      <classpath>
        <path refid="run.path.id"/>
        <pathelement path="${test.classes.dir}"/>
        <pathelement path="${build.dir}/classes"/>
        <pathelement path="${build.native}"/>
        <pathelement path="${test.resource.dir}"/>
      </classpath>
      <formatter type="${test.junit.output.format}"/>
      <batchtest todir="${test.log.dir}" unless="testcase">
        <fileset dir="${java.test.dir}"
                 includes="${test.includes}"
                 excludes="**/${test.exclude}.java"/>
      </batchtest>
      <batchtest todir="${test.log.dir}" if="testcase">
        <fileset dir="${java.test.dir}" includes="**/${testcase}.java"/>
      </batchtest>
    </junit>
    <fail if="tests.failed">Tests failed!</fail>
  </target>


  <target name="compile-tests" depends="compile" unless="skip.test">
    <delete dir="${test.classes.dir}"/>
    <mkdir dir="${test.classes.dir}"/>
    <javac srcdir="${java.test.dir}" destdir="${test.classes.dir}" deprecation="on"
           encoding="UTF-8" debug="true" includeantruntime="false">
      <classpath>
        <path refid="run.path.id"/>
        <pathelement location="${classes.dir}"/>
      </classpath>
      <include name="**/*.java"/>
    </javac>
  </target>


  <!-- generate thrift code -->
  <property name="thrift.source.dir" value="${src.dir}/main/thrift"/>
  <property name="thrift.target.dir" value="${src.dir}/main/gen-thrift"/>

  <!-- generate thrift stubs if necessary this version should be used by all sub projects ivy.xml -->
  <macrodef name="generate-thrift">
    <sequential>
      <pathconvert property="thrift.gen.path">
        <path location="${ivy.extra.thriftpackage}" />
        <unpackagemapper from="${basedir}/*" to="${thrift.target.dir}/*" />
      </pathconvert>
      <mkdir dir="${thrift.target.dir}" />
      <switch value="${os.name}">
        <case value="Mac OS X">
        <propertyregex property="thrift.bin"
                  input="${os.version}"
                  regexp="^(10\.[567]).*$"
                  select="${root.dir}/../thrift/bin/mac/\1/${thrift.version}/thrift"/>
        </case>
        <case value="Windows XP">
        <property name="thrift.bin"
                  value="${root.dir}/../thrift/bin/win/${thrift.version}/thrift-${thrift.version}.exe"/>
        </case>
        <case value="Windows Vista">
        <property name="thrift.bin"
                  value="${root.dir}/../thrift/bin/win/${thrift.version}/thrift-${thrift.version}.exe"/>
        </case>
        <case value="Windows 7">
        <property name="thrift.bin"
                  value="${root.dir}/../thrift/bin/win/${thrift.version}/thrift-${thrift.version}.exe"/>
        </case>
        <case value="Linux">
        <switch value="${os.arch}">
          <case value="amd64">
            <property name="thrift.bin" location="${root.dir}/../thrift/bin/linux/x86_64/${thrift.version}/thrift"/>
          </case>
          <case value="x86_64">
            <property name="thrift.bin" location="${root.dir}/../thrift/bin/linux/x86_64/${thrift.version}/thrift"/>
          </case>
        </switch>
        </case>
      </switch>
      <fail message="Do not have thrift binary for os: ${os.name} ${os.version} ${os.arch}" unless="thrift.bin"/>
      <apply executable="${thrift.bin}" dest="${thrift.gen.path}" failonerror="true"
             skipemptyfilesets="true" verbose="true">
        <arg value="--gen"/>
        <arg value="java:hashcode"/>
        <arg value="--gen"/>
        <arg value="rb"/>
        <arg value="-o"/>
        <arg value="${thrift.target.dir}"/>
        <arg value=""/>
        <fileset dir="${thrift.source.dir}" includes="**/*.thrift"/>
        <globmapper from="*.thrift" to="*.java"/>
      </apply>
      <move todir="${src.dir}/main/java">
        <fileset dir="${thrift.target.dir}/gen-java">
          <include name="**/*.java"/>
        </fileset>
      </move>
    </sequential>
  </macrodef>

  <macrodef name="compile-generated-thrift">
    <sequential>
      <javac srcdir="${thrift.target.dir}" destdir="${classes.dir}/classes" debug="true" includeantruntime="false">
        <classpath>
          <path refid="run.path.id"/>
        </classpath>
        <include name="**/*.java"/>
      </javac>
    </sequential>
  </macrodef>

  <target name="generate-thrift">
    <generate-thrift />
  </target>
  <!-- end of generate thrift -->
</project>
