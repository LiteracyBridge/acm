//project.ext {
//    String codeStyleDir = "${rootProject.projectDir}/../codeStyle" as Object
//    String javaLanguageLevel = "1.8" as Object
//}

apply plugin: 'java'

allprojects {
    apply plugin: 'idea'

    repositories {
        mavenCentral()
        maven {
            url = uri("https://maven.pkg.github.com/LiteracyBridge/CSMcompile")
//            url = uri("file://Users/bill/git-package")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("Akwasititus")
                password = project.findProperty("gpr.read_key") ?: System.getenv("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")
            }
        }
        flatDir {
            dirs '../../CSMcompile/build/libs'
        }
    }
}

task updateVersion() {
    group = 'build setup'
    def versionPropsFile = file('src/main/resources/version.properties')
    Properties versionProps = new Properties()
    def timestamp = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    def buildDate = new Date().format("yyMMdd")
    def buildNumber = 1
    def versionCounter = 0
    def versionDate = buildDate

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))

        def versionString = versionProps['BUILD_VERSION']
        buildNumber = versionProps['BUILD_NUMBER'].toInteger() + 1

        versionDate = versionString.substring(0, 6)
        versionCounter = versionString.substring(6)
        if (versionDate != buildDate) {
            println "It's a new day"
            versionDate = buildDate
            versionCounter = 0
        } else {
            def nextCounter = versionCounter.toInteger() + 1
            versionCounter = nextCounter.toString()
        }
    } else {
        println("Creating a new version.properties file.")
    }

    def versionString = versionDate + versionCounter

    versionProps['BUILD_NUMBER'] = buildNumber.toString()
    versionProps['BUILD_TIMESTAMP'] = timestamp
    versionProps['BUILD_DATE'] = buildDate
    versionProps['BUILD_VERSION'] = versionString
    versionProps.store(versionPropsFile.newWriter(), null)

}

build.dependsOn('updateVersion')

// Put the :core projects build artifacts in our own directory. Prevents us pulling in stale
// Android artifacts.
project(':core') {
    buildDir = 'java_build'
}

compileJava {
    targetCompatibility = '1.8'
    sourceCompatibility = '1.8'
    //options.compilerArgs += ["-Xlint:deprecation", "-Xlint:unchecked", "-nowarn"]
}

File distDirectory = file("$projectDir/dist")

task copyLibs(type: Sync) {
    println "Copy libs to $distDirectory/lib "
    // configurations.runtimeClasspath is the set of runtime dependencies, ie, everything
    // in the '"dependencies" section that is included by a "implementation" line.
    from configurations.runtimeClasspath
    into "$distDirectory/lib"
}

task copyJars(type: Copy, dependsOn: [':core:build', build]) {
    // libsDir is "build/libs". Copies acm.jar from "build/libs" to "dist".
    from libsDirectory
    into distDirectory
}

task copySync1(type: Copy) {
    from "$projectDir/../../S3Sync/dist/S3Sync.jar"
    from "$projectDir/../../S3Sync/ctrl/dist/ctrl-all.jar"
    into distDirectory
}
task copySync2(type: Copy) {
    from "$projectDir/../../S3Sync/dist/lib/argparse4j-0.8.1.jar"
    from "$projectDir/../../S3Sync/dist/lib/aws-interface-1.0.jar"
    into "$distDirectory/lib"
}
task copySync(dependsOn: [copySync1, copySync2]) {
}

task copyUpdateScript(type: Copy, dependsOn: copyJars) {
    from "$projectDir/scripts/acm.sh"
    from "$projectDir/scripts/tbl.sh"
    from "$projectDir/scripts/builder.sh"
    from "$projectDir/scripts/tb.sh"
    from "$projectDir/scripts/tbutil.sh"
    from "$projectDir/src/main/resources/version.properties"
    from "$projectDir/src/main/images/splash-acm.jpg"
    from "$projectDir/src/main/images/splash-tbl.png"
    into distDirectory
    rename("version.properties", "build.properties")
}

task dist(dependsOn: [copyJars, copyLibs, copySync, copyUpdateScript, updateVersion]) {
    description = 'This is the actual build. Ignore anything with \'assemble\'.'
    group = 'build'
}

clean.doLast {
    println "Deleting ${distDirectory}"
    file(distDirectory).deleteDir()
    // Wonder why this doesn't work?
    //delete distDirectory
    delete project(':core').buildDir
}

// Begin code to allow dynamically including the most up-to-date AWS libs.
buildscript {
    repositories {
        maven {
            url "https://repo1.maven.org/maven2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE"
    }
}
apply plugin: "io.spring.dependency-management"
//dependencyManagement {

//    imports {
//        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.10.47'
//    }
//}
// End code to allow dynamically including the most up-to-date AWS libs

dependencies {
    implementation project(':core')

    implementation 'org.apache.lucene:lucene-core:5.5.0'
    implementation 'org.apache.lucene:lucene-facet:5.5.0'
    implementation 'org.apache.lucene:lucene-analyzers-common:5.5.0'
    implementation 'org.apache.avro:avro:1.7.7'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    implementation 'org.slf4j:slf4j-api:1.7.16'
    implementation 'org.slf4j:slf4j-simple:1.7.16'
    implementation 'javax.media:jmf:2.1.1e'
    implementation 'jakarta-regexp:jakarta-regexp:1.4'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    implementation 'com.google.collections:google-collections:1.0-rc5'
    implementation 'org.yaml:snakeyaml:1.26'
    // This site has become inaccessible; they don't have a valid certificate. Copied
    // jar file to 3rdparty directory.
    // implementation 'it.cnr.imaa.essi:lablib-checkboxtree:3.1.1'
//    implementation 'org.netbeans.external:swing-layout-1.0.4:RELEASE68'
    // https://mvnrepository.com/artifact/org.swinglabs.swingx/swingx-all
    implementation group: 'org.swinglabs.swingx', name: 'swingx-all', version: '1.6.5-1'
    implementation 'args4j:args4j:2.0.16'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'com.opencsv:opencsv:5.5'
    implementation group: 'me.xdrop', name: 'fuzzywuzzy', version: '1.1.6'

    implementation 'com.amazonaws:aws-java-sdk-core:1.11.228'
    implementation 'com.amazonaws:aws-java-sdk-cognitoidp:1.11.228'
    implementation 'com.amazonaws:aws-java-sdk-cognitoidentity:1.11.228'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.11.228'

    implementation 'com.formdev:flatlaf:1.5'

    // TODO: Merge projects.
    implementation files('../../S3Sync/CloudSync/build/libs/CloudSync-1.0.jar')

    implementation files(fileTree('3rdparty').include('*.jar'))

    implementation 'org.javatuples:javatuples:1.2'

    if (new File(("../../CSMcompile/build/libs/CSMcompile-2.1.8.jar")).exists()) {
        implementation name: 'CSMcompile', version: '2.1.8'
    } else {
        implementation group: 'org.amplio.csm', name: 'csmcompile', version: '2.1.8'
    }

    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4-common:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'junit:junit:4.13.2'
}

// IntelliJ configuration
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }

//    project {
//        languageLevel = javaLanguageLevel
//
//        ipr {
//            withXml { xmlProvider ->
//                // Get root node.
//                def project = xmlProvider.asNode()
//                customizeIdeaCodeSyle project
//            }
//        }
//    }
}


// =========== IntelliJ settings ===========
//def customizeIdeaCodeSyle(project) {
//    //codeStyleDir="$projectDir/../codeStyle"
//    println "codeStyleDir: $codeStyleDir"
//    println "customizeIdeaCodeStyle($project)"
//
//    project.appendNode('component', [name: 'ProjectCodeStyleSettingsManager'])
//    def codeStyleNode = findComponent(project, 'ProjectCodeStyleSettingsManager')
//
//    codeStyleNode.appendNode('option', [name: 'USE_PER_PROJECT_SETTINGS', value: 'true'])
//    def projectSettingsNode = codeStyleNode.appendNode('option', [name: 'PER_PROJECT_SETTINGS']).appendNode('value')
//
//    def codeStyleUrl = rootProject.file("$codeStyleDir/idea_code_style_prefs.xml").toURI().toURL()
//
//    def codeStyleXml = new XmlParser().parseText(codeStyleUrl.text)
//    codeStyleXml.children().each { option ->
//        codeStyleNode.append(option)
//    }
//}

// Search component with given name
static def findComponent(project, name) {
    project.component.find { it.@name == name }
}
